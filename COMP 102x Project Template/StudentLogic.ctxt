#BlueJ class context
comment0.params=
comment0.target=StudentLogic()
comment0.text=initialises\ student\ logic
comment1.params=depthImages\ initialStep\ currentStep\ finalStep\ initialScale\ finalScale\ initialX\ finalX\ initialY\ finalY
comment1.target=comp102x.ColorImage\ generateIntermediateFootballImage(comp102x.ColorImage[],\ int,\ int,\ int,\ double,\ double,\ int,\ int,\ int,\ int)
comment1.text=\n\ The\ method\ generates\ an\ intermediate\ football\ image\ for\ the\ shooting\ animation\n\ \n\ @param\ depthImages\ \ \ an\ array\ of\ football\ images\ of\ different\ depths\n\ @param\ initialStep\ \ \ represents\ the\ initial\ step\ of\ the\ shooting\ animation\ \n\ @param\ currentStep\ \ \ represents\ the\ current\ step\ of\ the\ shooting\ animation\ \n\ @param\ finalStep\ \ \ \ \ represents\ the\ final\ step\ of\ the\ shooting\ animation\ \n\ @param\ initialScale\ \ represents\ the\ initial\ scale\ of\ the\ football\n\ @param\ finalScale\ \ \ \ represents\ the\ final\ scale\ of\ the\ football\n\ @param\ initalX\ \ \ \ \ \ \ represents\ the\ initial\ x\ position\ of\ the\ football\n\ @param\ finalX\ \ \ \ \ \ \ \ represents\ the\ final\ x\ position\ of\ the\ football\n\ @param\ initialY\ \ \ \ \ \ represents\ the\ initial\ y\ position\ of\ the\ football\n\ @param\ finalY\ \ \ \ \ \ \ \ represents\ the\ final\ y\ position\ of\ the\ football\n\ \n\ @return\ the\ selected\ depth\ image\n
comment10.params=highScoreRecords\ currentRecord
comment10.target=boolean\ isThereLowerScore(comp102x.assignment.GameRecord[],\ comp102x.assignment.GameRecord)
comment10.text=\n\ The\ method\ checks\ if\ there\ is\ lower\ score\ in\ the\ high\ score\ table\ than\ the\ score\ of\ the\ current\ record\n\ \n\ @param\ highScoreRecords\ represents\ the\ 1D\ array\ of\ the\ GameRecords\ of\ previous\ game\ plays\n\ @param\ currentRecord\ \ \ \ the\ current\ game\ record\n\ \n\ @return\ true\ if\ there\ is\ lower\ score,\ and\ false\ if\ there\ is\ not\n
comment11.params=highScoreRecords
comment11.target=int\ getIndexToReplace(comp102x.assignment.GameRecord[])
comment11.text=\n\ The\ method\ gets\ the\ index\ of\ the\ minimum\ score\ record\n\ \n\ @param\ highScoreRecords\ represents\ the\ 1D\ array\ of\ the\ GameRecords\ of\ previous\ game\ plays\n\ \n\ @return\ the\ index\ of\ the\ record\ to\ be\ replaced\n
comment12.params=highScoreRecords\ currentRecord
comment12.target=comp102x.assignment.GameRecord[]\ updateRecord(comp102x.assignment.GameRecord[],\ comp102x.assignment.GameRecord)
comment12.text=\n\ The\ method\ updates\ the\ high\ score\ table\ record\ where\ the\ name\ is\ identical\ to\ the\ one\ in\ currentRecord\n\ \n\ @param\ highScoreRecords\ represents\ the\ 1D\ array\ of\ the\ GameRecords\ of\ previous\ game\ plays\n\ @param\ currentRecord\ \ \ \ the\ current\ game\ record\n\ \n\ @return\ the\ updated\ high\ score\ record\ array\n
comment13.params=highScoreRecords\ indexToReplace\ currentRecord
comment13.target=comp102x.assignment.GameRecord[]\ updateRecord(comp102x.assignment.GameRecord[],\ int,\ comp102x.assignment.GameRecord)
comment13.text=\n\ The\ method\ updates\ the\ high\ score\ table\ with\ currentRecord\ at\ indexToReplace\n\ \n\ @param\ highScoreRecords\ \ represents\ the\ 1D\ array\ of\ the\ GameRecords\ of\ previous\ game\ plays\n\ @param\ indexToReplace\ \ \ \ the\ index\ where\ the\ record\ will\ be\ replaced\ by\ currentRecord\n\ @param\ currentRecord\ \ \ \ \ the\ current\ game\ record\n\ \n\ @return\ the\ updated\ high\ score\ record\ array\n
comment14.params=highScoreRecords
comment14.target=comp102x.assignment.GameRecord[]\ sortGameRecords(comp102x.assignment.GameRecord[])
comment14.text=\n\ The\ method\ returns\ with\ a\ sorted\ version\ of\ the\ input\ high\ scores\ array,\ in\ descending\ order\n\ \n\ @param\ highScoreRecords\ \ represents\ the\ 1D\ array\ of\ the\ GameRecords\ of\ previous\ game\ plays\n\ \n\ @return\ the\ sorted\ high\ score\ record\ array\n
comment15.params=highScoreRecords\ indexA\ indexB
comment15.target=comp102x.assignment.GameRecord[]\ swapGameRecords(comp102x.assignment.GameRecord[],\ int,\ int)
comment15.text=\n\ The\ method\ swaps\ two\ records\ in\ the\ high\ score\ records\n\ \n\ @param\ highScoreRecords\ \ represents\ the\ 1D\ array\ of\ the\ GameRecords\ of\ previous\ game\ plays\n\ @param\ indexA\ \ \ \ \ \ \ \ \ \ \ \ the\ index\ of\ the\ first\ record\ in\ the\ swap\n\ @param\ indexB\ \ \ \ \ \ \ \ \ \ \ \ the\ index\ of\ the\ second\ record\ in\ the\ swap\n\ \n\ @return\ the\ modified\ high\ score\ record\ array\n
comment16.params=gameRecordA\ gameRecordB
comment16.target=int\ compareGameRecords(comp102x.assignment.GameRecord,\ comp102x.assignment.GameRecord)
comment16.text=\n\ The\ method\ compares\ two\ game\ records\n\ \n\ @param\ gameRecordA\ \ \ \ \ \ \ first\ game\ record\ to\ compare\n\ @param\ gameRecordB\ \ \ \ \ \ \ second\ game\ record\ to\ compare\n\ \n\ @return\ zero\ if\ the\ two\ records\ are\ equal,\ \n\ \ \ \ \ \ \ \ \ less\ than\ zero\ if\ gameRecordA\ is\ less\ than\ gameRecordB,\ \n\ \ \ \ \ \ \ \ \ more\ than\ zero\ if\ gameRecordA\ is\ greater\ than\ gameRecordB\n
comment17.params=coordStrings
comment17.target=int[][]\ coordsToArray(java.lang.String[])
comment17.text=\n\ Converts\ an\ array\ of\ string\ coordinates\ into\ a\ 2D\ int\ array\ of\ coordinates\n\ \n\ @param\ coordStrings\ contains\ the\ list\ of\ coordinate\ strings,\ e.g.\ {"1,3","2,2"}\n\ \n\ @return\ a\ 2D\ integer\ array\ with\ the\ coordinates,\ e.g.\ {{1,3},{2,3}}\n
comment18.params=coordString
comment18.target=int[]\ coordsToArray(java.lang.String)
comment18.text=\n\ Converts\ a\ comma\ separated\ coordinate\ string\ into\ an\ integer\ array\n\ \n\ @param\ coordString\ contains\ the\ comma\ separated\ coordinate\ string,\ e.g.\ "1,3"\n\ \n\ @return\ an\ integer\ array\ with\ the\ coordinates,\ e.g.\ {1,3}\n
comment19.params=
comment19.target=void\ incrementHeartBeatCounter()
comment19.text=\ \n\ increments\ heardBeatCounter\ \n
comment2.params=goals\ goalA\ goalB
comment2.target=void\ swapGoals(comp102x.assignment.Goal[][],\ java.lang.String,\ java.lang.String)
comment2.text=\n\ Swaps\ two\ goals\ in\ the\ goals\ matrix\n\ \n\ @param\ goals\ is\ a\ 2D\ array\ of\ Goal\ objects\ that\ represents\ the\ goals\ displayed\ on\ the\ main\ game\ screen\n\ @param\ goalA\ one\ of\ the\ goals\ to\ swap\n\ @param\ goalB\ the\ other\ of\ the\ goals\ to\ swap\n
comment20.params=
comment20.target=int\ getHeartBeatCounter()
comment20.text=\ \n\ gets\ the\ value\ of\ heartBeatCounter\n
comment21.params=
comment21.target=java.lang.String[][][]\ getNeighbouringGoals()
comment21.text=\ \n\ gets\ the\ value\ of\ neighbouringGoals\n
comment22.params=
comment22.target=void\ fillUpNeighbours()
comment22.text=\n\ The\ method\ fills\ up\ neighbouringGoals\ array\n
comment23.params=inCoords
comment23.target=java.lang.String[]\ whatNeighbours(int[])
comment23.text=\n\ The\ method\ gives\ all\ neighbouring\ coordinates\ of\ inCoords\ in\ a\ ROWS\ by\ COLS\ array.\n\ \n\ @param\ inCoords\ the\ input\ coordinate\n\ \n\ @return\ an\ array\ of\ coordinate\ strings\n
comment24.params=
comment24.target=void\ printNeighbours()
comment24.text=\n\ the\ method\ prints\ out\ the\ neighbouringGoals\ table\ to\ the\ console.\n
comment3.params=goals
comment3.target=void\ updateGoalPositions(comp102x.assignment.Goal[][])
comment3.text=\n\ The\ method\ is\ called\ by\ the\ program\ periodically\ to\ update\ the\ positions\ of\ the\ goals.\ The\ value\ of\ the\ not-yet-hit\ goals\ is\ synchronised\ with\ heartBeat.\n\ Heartbeat\ is\ also\ used\ for\ not\ moving\ the\ same\ goal\ twice\ during\ the\ same\ heart\ beat.\n\ \n\ @param\ goals\ is\ a\ 2D\ array\ of\ Goal\ objects\ that\ represents\ the\ goals\ displayed\ on\ the\ main\ game\ screen\n\ \n
comment4.params=row\ col
comment4.target=java.lang.String[]\ getNeighbouringGoals(int,\ int)
comment4.text=\n\ gets\ neighboring\ goals\ from\ neighbouringGoals\ table\n\ \n\ @param\ row\ the\ row\ number\ in\ neighbouringGoals\n\ @param\ col\ the\ column\ number\ in\ neighbouringGoals\n\ \n\ return\ a\ string\ array\ with\ neighbouring\ coordinates\n
comment5.params=inCoord
comment5.target=java.lang.String[]\ getNeighbouringGoals(java.lang.String)
comment5.text=\n\ gets\ neighboring\ goals\ from\ neighbouringGoals\ table\n\ \n\ @param\ inCoord\ the\ coordinates\ in\ neighbouringGoals\ where\ the\ neighbour\ data\ is\ stored.\n\ \n\ return\ a\ string\ array\ with\ neighbouring\ coordinates\n
comment6.params=goals\ theNeighbours
comment6.target=java.lang.String[]\ getPossibleJumps(comp102x.assignment.Goal[][],\ java.lang.String[])
comment6.text=\n\ Filters\ from\ possible\ neighbours\ those\ where\ a\ jump\ can\ be\ made\n\ \n\ @param\ goals\ a\ 2D\ array\ of\ Goal\ objects\ that\ represents\ the\ goals\ displayed\ on\ the\ main\ game\ screen\n\ @param\ theNeighbours\ the\ list\ of\ neighbouring\ goals\n\ \n\ return\ a\ string\ array\ with\ coordinates\ of\ possible\ jumps\n
comment7.params=highScoreRecords\ name\ level\ score
comment7.target=comp102x.assignment.GameRecord[]\ updateHighScoreRecords(comp102x.assignment.GameRecord[],\ java.lang.String,\ int,\ int)
comment7.text=\n\ The\ method\ compares\ the\ record\ of\ the\ current\ game\ play\ with\n\ those\ of\ previous\ game\ plays\ and\ update\ the\ highscore\ records.\n\ \n\ @param\ highScoreRecords\ \ represents\ the\ 1D\ array\ of\ the\ GameRecords\ of\ previous\ game\ plays\n\ @param\ name\ \ \ \ \ \ \ \ \ \ \ \ \ \ the\ name\ of\ the\ current\ game\ player\n\ @param\ level\ \ \ \ \ \ \ \ \ \ \ \ \ the\ level\ of\ the\ current\ game\ play\n\ @param\ score\ \ \ \ \ \ \ \ \ \ \ \ \ the\ score\ of\ the\ current\ game\ play\n\ \n\ @return\ a\ new\ GameRecord\ array\ with\ current\ score\ added\ if\ among\ the\ top\ ten\n
comment8.params=highScoreRecords\ name
comment8.target=boolean\ isNameOnRecord(comp102x.assignment.GameRecord[],\ java.lang.String)
comment8.text=\n\ The\ method\ checks\ if\ a\ name\ is\ already\ in\ the\ high\ score\ table\n\ \n\ @param\ highScoreRecords\ represents\ the\ 1D\ array\ of\ the\ GameRecords\ of\ previous\ game\ plays\n\ @param\ name\ \ \ \ \ \ \ \ \ \ \ \ \ the\ name\ of\ the\ current\ game\ player\n\ \n\ @return\ true\ if\ the\ name\ is\ on\ the\ records,\ false\ if\ the\ name\ is\ not\ on\ the\ records\n
comment9.params=highScoreRecords\ currentRecord
comment9.target=boolean\ isCurrentRecordHigher(comp102x.assignment.GameRecord[],\ comp102x.assignment.GameRecord)
comment9.text=\n\ The\ method\ checks\ if\ a\ current\ score\ is\ higher\ than\ the\ one\ in\ the\ high\ score\ table\n\ \n\ @param\ highScoreRecords\ represents\ the\ 1D\ array\ of\ the\ GameRecords\ of\ previous\ game\ plays\n\ @param\ currentRecord\ \ \ \ the\ current\ game\ record\n\ \n\ @return\ true\ if\ the\ current\ record\ is\ higher,\ false\ if\ the\ current\ record\ is\ lower\ or\ not\ on\ the\ list\n
numComments=25
