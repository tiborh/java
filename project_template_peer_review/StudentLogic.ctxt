#BlueJ class context
comment0.params=depthImages\ initialStep\ currentStep\ finalStep\ initialScale\ finalScale\ initialX\ finalX\ initialY\ finalY
comment0.target=comp102x.ColorImage\ generateIntermediateFootballImage(comp102x.ColorImage[],\ int,\ int,\ int,\ double,\ double,\ int,\ int,\ int,\ int)
comment0.text=\n\ The\ method\ generates\ an\ intermediate\ football\ image\ for\ the\ shooting\ animation.\n\ \ \n\ The\ method\ performs\ select\ of\ the\ football\ image\ from\ the\ depthImages\ array,\ sets\ the\ image\n\ position\ and\ scale\ according\ to\ the\ current\ step\ of\ the\ shooting\ animation\ by\ calculate\ all\ \n\ values\ with\ the\ special\ formula.\n\ \n\ @param\ \ \ depthImages\ \ \ \ \ an\ array\ of\ football\ images\ of\ different\ depths\n\ @param\ \ \ initialStep\ \ \ \ \ initial\ step\ of\ the\ shooting\ animation\n\ @param\ \ \ currentStep\ \ \ \ \ current\ step\ of\ the\ shooting\ animation\n\ @param\ \ \ finalStep\ \ \ \ \ \ \ final\ step\ of\ the\ shooting\ animation\n\ @param\ \ \ initialScale\ \ \ \ represent\ the\ initial\ scale\ of\ the\ football\ image\n\ @param\ \ \ finalScale\ \ \ \ \ \ represent\ the\ final\ scale\ of\ the\ football\ image\n\ @param\ \ \ initialX\ \ \ \ \ \ \ \ represent\ the\ initial\ x\ positions\ of\ the\ football\ image\n\ @param\ \ \ finalX\ \ \ \ \ \ \ \ \ \ represent\ the\ final\ x\ positions\ of\ the\ football\ image\n\ @param\ \ \ initialY\ \ \ \ \ \ \ \ represent\ the\ initial\ y\ positions\ of\ the\ football\ image\n\ @param\ \ \ finalY\ \ \ \ \ \ \ \ \ \ represent\ the\ final\ y\ positions\ of\ the\ football\ image\n\ \n\ @return\ \ football\ image\n
comment1.params=goals
comment1.target=void\ updateGoalPositions(comp102x.assignment.Goal[][])
comment1.text=\n\ The\ method\ is\ called\ by\ the\ program\ periodically\ to\ update\ the\ positions\ of\ the\ goals.\n\ \n\ The\ method\ iterates\ over\ all\ goals.\ For\ each\ goal\ find\ all\ possible\ variants\ of\ its\ movement.\ \n\ All\ variants\ are\ stored\ in\ the\ list.\ While\ the\ list\ is\ not\ empty\ it\ randomly\ selected\ one\ \n\ moving\ scheme.\ The\ chosen\ scheme\ is\ removed.\ Other\ variants\ for\ moving\ this\ goal\ are\ also\ \n\ deleted\ (see\ the\ description\ of\ the\ method\ movingSchemeErase).\n\ \n\ @param\ goals\ goals\ array\n
comment2.params=possibleMovesTable\ movingScheme
comment2.target=void\ movingSchemeErase(java.util.ArrayList,\ StudentLogic.MovingScheme)
comment2.text=\n\ The\ method\ removes\ from\ the\ list\ that\ schemes,\ which\ coincide\ with\ the\ scheme\ of\ the\ place\ \n\ from\ the\ target\ is\ moved,\ or\ the\ place\ where\ the\ target\ is\ moved.\n\ \n\ @param\ \ \ possibleMovesTable\ \ list\ of\ moving\ schemes\n\ @param\ \ \ movingScheme\ \ \ \ \ \ \ \ moving\ scheme\ which\ compares\ with\ schemes\ from\ list\n
comment3.params=goals\ row\ column
comment3.target=java.util.ArrayList\ possibleMovesForGoal(comp102x.assignment.Goal[][],\ int,\ int)
comment3.text=\n\ The\ method\ searches\ for\ all\ possible\ movements\ of\ goal\ in\ "row\ -\ colomn"\ position.\n\ \n\ @param\ \ \ goals\ \ \ \ \ \ \ \ \ \ \ goal\ array\n\ @param\ \ \ row\ \ \ \ \ \ \ \ \ \ \ \ \ goal\ row\ position\n\ @param\ \ \ column\ \ \ \ \ \ \ \ \ \ goal\ column\ position\n\ @return\ \ possibleMoves\ \ \ list\ of\ all\ possible\ moves\ for\ goal\n
comment4.params=goals\ movingScheme
comment4.target=void\ moveGoal(comp102x.assignment.Goal[][],\ StudentLogic.MovingScheme)
comment4.text=\n\ The\ method\ moves\ the\ goal\ in\ accordance\ with\ the\ scheme\ of\ movement.\n\ \n\ @param\ \ \ goals\ \ \ \ \ \ \ \ \ \ \ goals\ array\n\ @param\ \ \ movingScheme\ \ \ \ scheme\ of\ movement\n
comment5.params=highScoreRecords\ name\ level\ score
comment5.target=comp102x.assignment.GameRecord[]\ updateHighScoreRecords(comp102x.assignment.GameRecord[],\ java.lang.String,\ int,\ int)
comment5.text=\n\ The\ method\ is\ called\ by\ the\ program\ when\ the\ game\ finishes\ and\ compares\ the\ record\ of\ the\ current\ game\ \n\ play\ with\ those\ of\ previous\ game\ plays\ and\ update\ the\ highscore\ records.\ Update\ realizes\ in\ according\ with\:\n\ If\ there\ are\ no\ previous\ game\ play\ records,\ return\ a\ new\ GameRecord\ array\ of\ \n\ size\ 1\ containing\ the\ current\ record.\n\ If\ the\ player's\ name\ doesn't\ exist\ in\ the\ previous\ records\ and\ there\ are\ less\ \n\ than\ 10\ previous\ records,\ return\ a\ new\ GameRecord\ array\ containing\ all\ the\ \n\ previous\ records\ and\ the\ new\ record.\n\ If\ the\ player's\ name\ doesn't\ exist\ in\ the\ previous\ records\ and\ there\ are\ 10\ \n\ previous\ records,\ return\ a\ new\ GameRecord\ array\ containing\ the\ best\ 10\ records.\ \n\ A\ record\ is\ better\ than\ the\ other\ one\ if\ it\ has\ a\ higher\ score,\ or\ the\ two\ \n\ records\ have\ the\ same\ score,\ but\ it\ has\ a\ higher\ level.\ \n\ If\ the\ player's\ name\ exists\ in\ the\ previous\ records\ and\ the\ current\ record\ is\ \n\ better\ than\ the\ previous\ record,\ return\ a\ new\ GameRecord\ array\ containing\ all\ \n\ the\ previous\ records,\ but\ with\ the\ score\ and\ level\ of\ the\ player\ updated\ to\ \n\ those\ of\ the\ current\ game\ play.\n\ If\ the\ player's\ name\ exists\ in\ the\ previous\ records\ and\ the\ current\ record\ is\ \n\ the\ same\ or\ is\ worse\ than\ the\ previous\ record,\ return\ a\ new\ GameRecord\ array\ \n\ containing\ all\ the\ previous\ records.\n\ In\ all\ of\ the\ cases\ listed\ above,\ the\ records\ in\ the\ returned\ GameRecord\ array\ \n\ should\ be\ sorted\ first\ by\ score,\ and\ then\ by\ level\ in\ descending\ order,\ and\ then\n\ by\ name\ in\ alphabetical\ order.\n\ \n\ @param\ \ \ highScoreRecords\ \ \ \ 1D\ array\ of\ the\ GameRecords\ of\ prevous\ game\ plays\ with\ the\ maximum\ size\ HIGH_SCORE_RECORDS_ALL\n\ @param\ \ \ name\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ represents\ the\ name\ of\ the\ current\ game\ play.\ This\ method\ returns\ a\ 1D\ array\ of\ GameRecords\ after\ processing\ the\ record\ of\ the\ current\ game\ play.\n\ @param\ \ \ level\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ represents\ the\ level\ of\ the\ current\ game\ play\n\ @param\ \ \ score\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ represents\ the\ score\ of\ the\ current\ game\ play\n\ @return\ \ 1D\ array\ of\ GameRecords\ after\ processing\ the\ record\ of\ the\ current\ game\ play\n
numComments=6
