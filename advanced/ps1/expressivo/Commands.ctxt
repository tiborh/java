#BlueJ class context
comment0.params=expression\ variable
comment0.target=java.lang.String\ differentiate(java.lang.String,\ java.lang.String)
comment0.text=\n\ Differentiate\ an\ expression\ with\ respect\ to\ a\ variable.\n\ @param\ expression\ the\ expression\ to\ differentiate\n\ @param\ variable\ the\ variable\ to\ differentiate\ by,\ a\ case-sensitive\ nonempty\ string\ of\ letters.\n\ @return\ expression's\ derivative\ with\ respect\ to\ variable.\ \ Must\ be\ a\ valid\ expression\ equal\n\ \ \ \ \ \ \ \ \ to\ the\ derivative,\ but\ doesn't\ need\ to\ be\ in\ simplest\ or\ canonical\ form.\n\ @throws\ IllegalArgumentException\ if\ the\ expression\ or\ variable\ is\ invalid\n
comment1.params=expression\ environment
comment1.target=java.lang.String\ simplify(java.lang.String,\ java.util.Map)
comment1.text=\n\ Simplify\ an\ expression.\n\ @param\ expression\ the\ expression\ to\ simplify\n\ @param\ environment\ maps\ variables\ to\ values.\ \ Variables\ are\ required\ to\ be\ case-sensitive\ nonempty\ \n\ \ \ \ \ \ \ \ \ strings\ of\ letters.\ \ The\ set\ of\ variables\ in\ environment\ is\ allowed\ to\ be\ different\ than\ the\ \n\ \ \ \ \ \ \ \ \ set\ of\ variables\ actually\ found\ in\ expression.\ \ Values\ must\ be\ nonnegative\ numbers.\n\ @return\ an\ expression\ equal\ to\ the\ input,\ but\ after\ substituting\ every\ variable\ v\ that\ appears\ in\ both\n\ \ \ \ \ \ \ \ \ the\ expression\ and\ the\ environment\ with\ its\ value,\ environment.get(v).\ \ If\ there\ are\ no\n\ \ \ \ \ \ \ \ \ variables\ left\ in\ this\ expression\ after\ substitution,\ it\ must\ be\ evaluated\ to\ a\ single\ number.\n\ \ \ \ \ \ \ \ \ Additional\ simplifications\ to\ the\ expression\ may\ be\ done\ at\ the\ implementor's\ discretion.\n\ @throws\ IllegalArgumentException\ if\ the\ expression\ is\ invalid\n
numComments=2
